1，2，3，4，5
1，2，3，5

input：【3，1，2，5】
output： 4

int getMissingNumber(int[] nums) {
    int diff, l1, l2, r1, r2, diff1 = Integer.Max_Int, diff2 = Integer.Max_Int;
    l1 = 0;
    for(int i = 1;i<nums.length;i++) {
      if(Math.abs(nums[l1]-nums[i])<diff1) {
          diff1 = Math.abs(nums[l1]-nums[i]);
          r1 = i;
      }
    }
    l2 = r1==1?2:1;
    for(int i = 0;i<nums.length;i++) {
      if(i!=l2 && Math.abs(nums[l2]-nums[i])<diff2) {
          diff2 = Math.abs(nums[l2]-nums[i]);
          r2 = i;
      }
    }
    diff = Math.min(diff1, diff2);
    HashSet<Integer> arr = new HashSet<Integer>();
    int min = Integer.Max_Int, max = -Integer.Min_Int;
    for(int i:nums) {
        arr.add(i);
        min = Math.min(i, min);
        max = Math.max(i, max);
    }
    for(int i=min+diff;i<max;i+=diff) {
        if (arr.get(i)==null)
            return i;
    }
    return min-diff;
      
}

public class cache｛
   　public class ListNode{
       int value;
       ListNode next;
       ListNode pre;
       ListNode(int x) {
           value = x;
       }
   }
   ListNode head = new ListNode(-1);
   ListNode end = head;
   HashMap<Integer, ListNode>map = new HashMap<Integer,ListNode>();
   void add(int x, int size) {
       if (size == 0)return;
       ListNode node = map.get(x);
       if (node==null) {
           node = new ListNode(x);
       } else {
           ListNode next = node.next;
           node.pre.next = next;
           next.pre = node.pre;
       }
       node.next = null;
       end.next = node;
       node.pre = end;
       end = end.next;
       map.add(x, node);
       if (map.size()>size) {
           map.remove(head.next.value);
           head.next = head.next.next;
           head.next.pre = head;
       }
   
   }

transactions
 - str user_id
 - str product_id
 - str transaction_id
 - int purchase_day
 
 users
  - str user_id
  - str gender (male/female)
  
  find the most purchased product for each gender, for each day
  select product_id, gender, purchase_day, max(cnt) from (
      select product_id, gender, purchase_day, count(*) as cnt
      from transactions join users
      on transactions.user_id=users.user_id
      group by product_id, gender, purchase_day      
  )
  group by gender, purchase_day
   






｝